function loadDialogWidget(){
    if(InitData["messageData"]["messageFriendList"].length==0){
        //产生一个全局判断变量，用于在点开消息时判断
        //如果全局判断变量为True则弹出提示框(请通过左边好友列表发起消息)，若为False则展示消息
        //预计会在InitData中加入变量保存最新消息数量
    }else{
        //根据InitData中的新消息数量更新提示泡中的数字，若为0则不显示提示泡
        //根据InitData中的messageFriendList中的内容更新dialog-user-list
    }
}

//前端编写信息插入函数
function insertMessage(insertType,Content){
    //insertType:0(timeStamp) 1(to-me) 2(to-other)
    
}

数据库user_info中添加字段new_message_number

后台通知前台更新消息框时，须附带更新内容
当收到新消息提醒时，前端需要更具不同的情况进行不同区域的刷新
1、message_widget未显示时调用loadMessageWidget()
2、message_widget显示时
    a、active用户为消息发送方调用insertMessage()
    b、active用户不为消息发送方调用loadMessageFriendList()

点击用户列表中的发送消息通过ajax后执行loadMessageWidget()
在widget中点击的active friendlist通过ajax

消息列表接受到新消息情况解析
1、消息列表关闭的情况下
    调用loadMessageWidget方法
2、消息列表打开的情况下
    a、active对象为消息发送方，insert方法插入消息
    b、active对象不为消息发送方，刷新messageFriendList 刷新bubble

判断页面是否刷新实现原理
1、火狐只有在关闭页面时才会触发onbeforeunload事件
2、chorme再刷新和关闭页面时都会触发onbeforeunload和onunload事件 
    页面刷新时，刷新之前执行onbeforeunload事件，在新页面即将替换旧页面时onunload事件，最后onload事件
    页面关闭时，先onbeforeunload事件，再onunload事件
    由于刷新时onbeforeunload与onunload事件之间间隔时间较长所以可以更具次特性来判断浏览器是否为刷新

getGameRoomData
当玩家sitDown时会在前端cookies中设置桌号，当页面加载时后端自动获取前端中的cookies值

gameRoomData
{
    "playerInfo": [
        {
            "position": "left",
            "userId": "1",
            "username": "test",
            "avatar": "",
            "sex": "",
            "birthday": "",
            "qq": "",
            "gameTime": "",
            "winTime": "",
            "drawTime": ""
        },
        {
            "position": "left",
            "userId": "1",
            "username": "test",
            "avatar": "",
            "sex": "",
            "birthday": "",
            "qq": "",
            "gameTime": "",
            "winTime": "",
            "drawTime": ""
        }
    ]
}

SELECT
	b.user_id AS left_user_id,
	b.username AS left_username,
	c.avatar AS left_avatar,
	c.sex AS left_sex,
	c.birthday AS left_birthday,
	c.qq AS left_qq,
	c.game_time AS left_game_time,
	c.win_time AS left_win_time,
	c.draw_time AS left_draw_time,
	d.user_id AS right_user_id,
	d.username AS right_username,
	e.avatar AS right_avatar,
	e.sex AS right_sex,
	e.birthday AS right_birthday,
	e.qq AS right_qq,
	e.game_time AS right_game_time,
	e.win_time AS right_win_time,
	e.draw_time AS right_draw_time
FROM
	game_table_info AS a
LEFT JOIN `user` AS b ON a.left_player_id = b.user_id
LEFT JOIN user_info AS c ON b.user_id = c.user_id
LEFT JOIN `user` AS d ON a.right_player_id=d.user_id
LEFT JOIN user_info AS e ON d.user_id=e.user_id
WHERE
	table_id = 5

进入游戏后连接GameRoom WebSocket
GameRoomWebSocket的OnOpen中如对应的roomId的SocketCache中不为空，则需遍历通知刷新GameRoom界面
GameRoomSocketCache结构
{
    "1": {
        "3": {
            "webSocket": "self",
            "readyState": false,
            "chessColor": "",
            "winTime": 0,
            "chessTime": "",
            "yourTurn": false
        },
        "6": {
            "webSocket": "self",
            "readyState": false,
            "chessColor": "",
            "winTime": 0,
            "chessTime": "",
            "yourTurn": false
        },
        "gameTime": "00:00",
        "stepRecord": [
            {
                "playerId": "1",
                "chessType": "black",
                "point": [
                    0,
                    3
                ]
            },
            {
                "playerId": "1",
                "chessType": "black",
                "point": [
                    0,
                    3
                ]
            }
        ]
    }
}
每局结束提醒前端是否需要保存对局，结束后清空stepRecord